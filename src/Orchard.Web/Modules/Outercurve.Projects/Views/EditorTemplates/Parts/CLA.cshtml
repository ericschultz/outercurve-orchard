
@using System.Text
@using Orchard.UI.Resources
@using Outercurve.Projects
@using Outercurve.Projects.Helpers
@using Outercurve.Projects.Services


@model Outercurve.Projects.ViewModels.EditCLAViewModel
@{
    //Script.Require("CLA");
    //Style.Require("Common_DatePicker");
  
  //  Style.Require("bootstrap-datetime").AtLocation(ResourceLocation.Foot);
  

}

@functions {
    IHtmlString CreateValues(string selected, string selectedHtml, IEnumerable<string> ids) {
        
        //create

        return Html.Raw(Json.Encode( ids.ToDictionary(i => i, i => i == selected ? selectedHtml : "null")));

        /*
        var stringBuilder = new StringBuilder("{");
        foreach (var i in ids) {
            stringBuilder.AppendLine().Append(i).Append(" : ");
            if (i == selected) {
                stringBuilder.Append("\"").Append(HttpUtility.JavaScriptStringEncode(selectedHtml)).Append("\"");
            }
            else {
                stringBuilder.Append("null");
            }
            stringBuilder.Append(",");
        }
        //remove our comma
        stringBuilder.Remove(stringBuilder.Length - 1, 1);
        stringBuilder.AppendLine().Append("}");
        return Html.Raw(stringBuilder.ToString());
        */

    }
}


    
    
     
<div class="form-horizontal container-fluid"> 
    <div class="row">

            
             <div class="page-header">
                    <h3 style="margin-bottom: -5px;">CLA Signer Personal Details:</h3>
                </div>
            <div class="control-group">
                @Html.ControlLabelFor(m => m.CLASignerUsername, T("CLA Signing User"))
                <div class="controls">
                    @Html.DropDownListFor(model => model.CLASignerUsername, Html.ToSelectListItems(ViewData["AllUsers"], Model.CLASignerUsername))
                    @Html.ValidationMessageFor(model => model.CLASignerUsername)
                    @Html.ActionLink("Quick Add User", "Create", new { Controller = "QuickUserAdmin", Area = "Outercurve.Projects", returnUrl = Context.Request.RawUrl }, new {@class = "button primaryAction"})
                </div>
            </div>
            <div class="control-group">
                @Html.ControlLabelFor(m => m.CLASignerFirstName, T("First Name"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.CLASignerFirstName)
                    @Html.ControlValidationMessageFor(m => m.CLASignerFirstName, null)
                </div>
            </div>
            
            <div class="control-group">
                @Html.ControlLabelFor(m => m.CLASignerLastName, T("Last Name"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.CLASignerLastName)
                    @Html.ControlValidationMessageFor(m => m.CLASignerLastName, null)
                </div>
            </div>
            
            <div class="control-group">
                @Html.ControlLabelFor(m => m.CLASignerEmail, T("Email"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.CLASignerEmail)
                    @Html.ControlValidationMessageFor(m => m.CLASignerEmail, null)
                </div>
            </div>
            <div class="control-group">
                @Html.ControlLabelFor(m => m.Address1, T("Address1"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.Address1)
                    @Html.ControlValidationMessageFor(m => m.Address1, null)
                </div>
            </div>
            <div class="control-group">
                @Html.ControlLabelFor(m => m.Address2, T("Address2"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.Address2)
                    @Html.ControlValidationMessageFor(m => m.Address2, null)
                </div>
            </div>
            <div class="control-group">
                @Html.ControlLabelFor(m => m.City, T("City"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.City)
                    @Html.ControlValidationMessageFor(m => m.City, null)
                </div>
            </div>
            <div class="control-group">
                @Html.ControlLabelFor(m => m.State, T("State'Province"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.State)
                    @Html.ControlValidationMessageFor(m => m.State, null)
                </div>
            </div>
            <div class="control-group">
                @Html.ControlLabelFor(m => m.ZipCode, T("Postal Code"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.ZipCode)
                    @Html.ControlValidationMessageFor(m => m.ZipCode, null)
                </div>
            </div>

            <div class="control-group">
                @Html.ControlLabelFor(m => m.Country, T("Country"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.Country)
                    @Html.ControlValidationMessageFor(m => m.Country, null)
                </div>
            </div>
            <div class="control-group">
                @Html.ControlLabelFor(m => m.Employer, T("Employer"))
                <div class="controls">
                    @Html.TextBoxFor(m => m.Employer)
                    @Html.ControlValidationMessageFor(m => m.Employer, null)
                </div>
            </div>
            
            <div class="control-group">
                @Html.ControlLabelFor(m => m.IsSignedByUser, T("Is Signed By User?"))
                <div class="controls">
                    @Html.CheckBoxFor(m => m.IsSignedByUser, new  RouteValueDictionary { {"data-bind","checked: isSigned"} } )
                     
                </div>
            </div>
            <div  data-bind="visible: isSigned" style="margin-left:50px">
               
                <div class="control-group">
                    @Html.ControlLabelFor(m => m.SigningDate, T("Signed By User On:") )
                    <div class="input-append date">
                        
                            @Html.TextBoxFor(m => m.SigningDate)
                            <span class="add-on">
                                <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
                            </span>
                        
                        
                        @Html.ControlValidationMessageFor(m => m.SigningDate, null)
                    </div>
                </div>
    
            </div>
                
           
            
        
       
        </div>
    <div class="row">
        <div class="page-header"><h3>Employer Signing Information</h3></div>
        
        
        <div class="control-group">
            @Html.ControlLabelFor(m => m.NeedCompanySignature, T("Needs Company Signature"))
            <div class="controls">
                @Html.CheckBoxFor(m => m.NeedCompanySignature, new Dictionary<string, object> {{"data-bind","checked: needsCompanySignature"}} )
                     
            </div>
        </div>
                 
        <div class="control-group offset1" data-bind="visible: needsCompanySignature">
            @Html.ControlLabelFor(m => m.NeedCompanySignature, T("Has Company Signature"))
            <div class="controls">
                @Html.CheckBoxFor(m => m.NeedCompanySignature, new Dictionary<string, object> {{"data-bind","checked: hasEmployerSigner"}} )
                     
            </div>
        </div>
        <div data-bind="visible: hasEmployerSigner" class="offset2">
            
                <div class="control-group">
                    @Html.ControlLabelFor(m => m.CompanySigner, T("Company Signer"))
                    <div class="controls">
                        @Html.TextBoxFor(m => m.CompanySigner)
                        @Html.ControlValidationMessageFor(m => m.CompanySigner, null)
                    </div>
                </div>
                <div class="control-group">
                    @Html.ControlLabelFor(m => m.CompanySignerEmail, T("Company Signer Email"))
                    <div class="controls">
                        @Html.TextBoxFor(m => m.CompanySignerEmail)
                        @Html.ControlValidationMessageFor(m => m.CompanySignerEmail, null)
                    </div>
                </div>

                <div class="control-group">
                    @Html.ControlLabelFor(m => m.CompanySigningDate, T("Date Company Signed"))
                    <div class="controls">
                        @Html.EditorFor(m => m.CompanySigningDate)
                        @Html.ControlValidationMessageFor(m => m.CompanySigningDate, null)
                    </div>
                </div>
            
        </div>

           

        
    </div>
    
    <div class="row">
        <div class="page-header"><h3>Foundation Signing Information</h3></div>

                <div class="control-group">
                    @Html.ControlLabelFor(m => m.HasFoundationSigner, T("Has Foundation Signature"))
                    <div class="controls">
                        @Html.CheckBoxFor(m => m.HasFoundationSigner, new Dictionary<string, object> {{"data-bind","checked: hasFoundationSigner"}} )
                    </div>
                </div>
                <div data-bind="visible: hasFoundationSigner" class="offset1">
                    
                        <div class="control-group">
                            @Html.ControlLabelFor(m => m.FoundationSignerUsername, T("Foundation Signer"))
                            <div class="controls">
                                @Html.DropDownListFor(model => model.FoundationSignerUsername, Html.ToSelectListItems(ViewData["AllUsers"], Model.FoundationSignerUsername))
                                @Html.ControlValidationMessageFor(m => m.FoundationSignerUsername, null)
                                @Html.ActionLink("Quick Add User", "Create", new { Controller = "QuickUserAdmin", Area = "Outercurve.Projects", returnUrl = Context.Request.RawUrl }, new {@class = "button primaryAction"});
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.ControlLabelFor(m => m.FoundationSigningDate, T("Foundation Signed On"))
                            <div class="controls">
                                @Html.EditorFor(m => m.FoundationSigningDate)
                                @Html.ControlValidationMessageFor(m => m.FoundationSigningDate, null)
                            </div>
                        </div>

                    
                </div>
            
         
        
    </div>


     <div class="row">
         <div class="page-header"><h3>License Agreement</h3></div>
          <div class="control-group">
                
                            @{
                                var createTemplate = Model.Template.TemplateNameVersionsAndIds.Select(
                                    i =>
                                    new SelectListItem {Selected = i.Key == Model.SelectedTemplate, Text = i.Value.ToString(), Value = i.Key}).ToArray();
                            }
                            @Html.ControlLabelFor(m => m.SelectedTemplate, T("CLA"))
                            <div class="controls">
                                @Html.DropDownListFor(m => m.SelectedTemplate,
                                                      createTemplate,
                                                      new RouteValueDictionary{ {"data-bind", "value: selectedTemplateId" }} )
                   
                                @Html.ControlValidationMessageFor(m => m.SelectedTemplate, null)
                            </div>
                        </div>
               
                
                 <div   class="control-group">
                     <div class="control-label">CLA Content</div>
                     <div class="controls" style="list-style-type: decimal">
                         <div data-bind="html: selectedTemplateHtml()" ></div>
                     </div>
                 </div>
     </div>
   

   
    <div class="row">
        <div class="page-header">
            <h3>Other</h3>
        </div>
        <div class="control-group">
            @Html.ControlLabelFor(m => m.IsCommitter, T("User is a committer"))
            <div class="controls">
                @Html.CheckBoxFor(m => m.IsCommitter)
                @Html.ControlValidationMessageFor(m => m.IsCommitter, null)
            </div>
        </div>

        <div class="control-group">
            @Html.ControlLabelFor(m => m.LocationOfCLA, T("Location Of CLA"))
            <div class="controls">
                @Html.TextBoxFor(m => m.LocationOfCLA)
                @Html.ControlValidationMessageFor(m => m.LocationOfCLA, null)
            </div>
        </div>
        
        
        <div class="control-group">
            @Html.ControlLabelFor(m => m.Comments, T("Private comments on this CLA"))
            <div class="controls">
                @Html.TextAreaFor(m => m.Comments)
                @Html.ControlValidationMessageFor(m => m.Comments, null)
            </div>
        </div>

        
        
        <div class="control-group">
            @Html.ControlLabelFor(m => m.StaffOverride, T("Check if you'd like this CLA to be considered INVALID no matter what!"))
            <div class="controls">
                @Html.CheckBoxFor(m => m.StaffOverride)
                @Html.ControlValidationMessageFor(m => m.StaffOverride, null)
            </div>
        </div>                                     
    </div>
</div>




@using(Script.Foot()) {

  //  @Script.Include("ko.observableDictionary.js")

  //  Script.Require("bootstrap-datetime");


    <script type="text/javascript">
//<![CDATA[
        $(function () {
          
        /*  
            $('#Html.FieldIdFor(m => m.SigningDate)').datetimepicker({
                format: 'MM/dd/yyyy',
                pickDate: true,
                pickTime: false
            });*/
         
            


            ko.bindingHandlers.goEnable = {
                init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    if (valueAccessor()) {
                        $('#' + element.id).button('enable');
                    } else {
                        $('#' + element.id).removeAttr('checked');
                        $('#' + element.id).button('disable');
                    }
                  
                    $('#' + element.id).button("refresh");

                },
                update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                    if (valueAccessor()) {
                        $('#' + element.id).button('enable');
                    } else {
                        $('#' + element.id).removeAttr('checked');
                        $('#' + element.id).button('disable');
                    }
                  
                    $('#' + element.id).button("refresh");
                }
            };

            var ViewModel = function(signed, foundationSigner, employerSigner, needsCompanySignature, idVersionToHtmlDictionary, selectedTemplateId) {
                var self = this;
                /* visibility */
                self.isSigned = ko.observable(signed);
                self.hasFoundationSigner = ko.observable(foundationSigner);
                self.hasEmployerSigner = ko.observable(employerSigner);
                self.needsCompanySignature = ko.observable(needsCompanySignature);
                self.isValidEnabled = ko.computed(function() {
                    return self.isSigned() && self.hasFoundationSigner();
                });
                
                /* get version and html */
                self.idVersionToDictionary = ko.observableDictionary(idVersionToHtmlDictionary);
                self.selectedTemplateId = ko.observable(selectedTemplateId);
                self.selectedTemplateHtml = ko.computed(function() {
                    if (self.idVersionToDictionary.get(self.selectedTemplateId())() == "null") {
                        $.getJSON("@Url.Action("GetIdAndVersion", "CLAAdmin", new RouteValueDictionary {{"area", "Outercurve.Projects"}})?idVersion=" + self.selectedTemplateId(), function(data) {
                            self.idVersionToDictionary.set(self.selectedTemplateId(), data);
                        });
                        return "";
                    }
                    return self.idVersionToDictionary.get(self.selectedTemplateId());
                });
            
            
            };
            var signedByUser = @Model.IsSignedByUser.ToString().ToLower();

            var signedByFoundation = @Model.HasFoundationSigner.ToString().ToLower();

            var signedByCompany = @Model.HasCompanySigner.ToString().ToLower();

            var needsCompanySignature = @Model.NeedCompanySignature.ToString().ToLower();
            
            var idVersionToHtmlDictionaryMap = @CreateValues(Model.SelectedTemplate, Model.Template.CurrentHtmlForTemplate, Model.Template.TemplateNameVersionsAndIds.Select(i => i.Key));

            var selectedTemplateId = "@Model.SelectedTemplate";

            var ourVm = new ViewModel(signedByUser, signedByFoundation, signedByCompany, needsCompanySignature, idVersionToHtmlDictionaryMap, selectedTemplateId);
            ko.applyBindings(ourVm);


           
            
            
           
            
        })


   
//]]>
</script>
}